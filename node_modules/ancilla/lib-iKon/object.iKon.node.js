var Ancilla = require('ancilla');
var Gateway = Ancilla.Gateway;
var Object = Ancilla.Object;
var Tools = Ancilla.Tools;
//Tools.setDebug( true ); //Set TRUE to show debug messages
var DBiKon = require('DB.iKon.node.js');

//iKon Object
var ObjectiKon = function( iID, fCallback, oOptions ){
	//Default Options
	oOptions = Tools.extend( {
		bIgnoreRelations: false
	}, oOptions );
	var _oObject = this;
	this.id = iID;
	this._aParents = new Array();
	this._aChildren = new Array();
	this._getObject( fCallback, Default );
}
Tools.inherits( ObjectiKon, Object );

ObjectiKon.prototype._getObject = function( fCallback, oOptions ){
	var _oObject = this;
	//Executing queries
	DBiKon._executeQuery( "SELECT * FROM DPADD_OBJECT WHERE ID=" + _oObject.id + ";", function( iResult, aResults, sQuery ){
		Tools.debug( '[ ObjectiKon: %s ] filling by array "%s"', _oObject.id, aResults );
		_oObject.fillByArray( aResults );
		if( !oOptions.bIgnoreRelations ){
			DBiKon._executeQuery( "SELECT * FROM DPADD_OBJECT_RELATION WHERE PARENTOBJ_ID=" + _oObject.id + " OR CHILDOBJ_ID=" + _oObject.id + ";", function( iResult, aResults, sQuery ){
				Tools.debug( '[ ObjectiKon: %s ] filling by relations array "%s"', _oObject.id, aResults );
				_oObject._fillRelationsByArray( aResults, fCallback );
			} );
		}
	} );
}
ObjectiKon.prototype._fillRelationsByArray = function( oArray, fCallback ){
	var _oObject = this;
	if( oArray.length == 0 ){
		if( fCallback ){
			fCallback();
		}
	} else {
		var _oCurrenRelation = oArray.shift();
		var _oObjectFromRelation = new Object( iObjectID, function(){
			if( _oCurrenRelation.PARENTOBJ_ID == this.id ){
				_oObject._aParents.push( _oObjectFromRelation );
			} else {
				_oObject._aChildren.push( _oObjectFromRelation );
			}
			_oObject._fillRelationsByArray( oArray, fCallback );
		}, {
			bIgnoreRelations: true
		});
	}
}

ObjectiKon.prototype.getParents = function( oOptions ){
	return this._aParents;
}
ObjectiKon.prototype.getChildren = function( oOptions ){
	return this._aChildren;
}

module.exports = ObjectiKon;