var Ancilla = require('ancilla');
var Gateway = Ancilla.Gateway;
var Tools = Ancilla.Tools;
//Tools.setDebug( true ); //Set TRUE to show debug messages

//Gateway to query iKon DB
var DBiKon = function(){
	this._oDBEndpoint = new Gateway([{
			type: 'connect',
			connectionType: 'net',
			host: '192.168.0.196',//'localhost',
			port: '45168'
		}
	]);
	this._oDBEndpoint.on('error', function( oError, oGWEndpoint ) {
		Tools.error( '[ DBiKon ] Error: %s from iKon DB manager endpoint', oError.toString() );
	});
}

DBiKon.prototype = {
	query: function( sTable, sOperation, arg1, arg2, arg3 ){
		var oOptions = null;
		switch( sOperation ){
			case 'SELECT':
				oOptions = Tools.extend( true, {
					aFields: arg1,
					aWheres: ( typeof( arg2 ) == 'function' ? null : arg2 ),
					fCallback: ( typeof( arg3 ) == 'function' ? arg3 : ( typeof( arg2 ) == 'function' ? arg2 : null ) )
				}, oOptions );
			break;
			case 'UPDATE':
				oOptions = Tools.extend( true, {
					aFields: arg1,
					aWheres: ( typeof( arg2 ) == 'function' ? null : arg2 ),
					fCallback: ( typeof( arg3 ) == 'function' ? arg3 : ( typeof( arg2 ) == 'function' ? arg2 : null ) )
				}, oOptions );
			break;
			case 'DELETE':
				oOptions = Tools.extend( true, {
					aFields: {},
					aWheres: ( typeof( arg1 ) == 'function' ? null : arg1 ),
					fCallback: ( typeof( arg3 ) == 'function' ? arg3 : ( typeof( arg2 ) == 'function' ? arg2 : null ) )
				}, oOptions );
			break;
			default:
				Tools.error('[ DBiKon ] Unsupported operation: "%s"...', sOperation );
				//Exiting
				return;
			break;
		}
		sTable = sTable.toUpperCase();
		switch( sTable ){
			case 'DPADD_OBJECT':
			case 'DPADD_OBJECT_RELATION':
				sOperation = sOperation.toUpperCase();
				switch( sOperation ){
					case 'SELECT':
						var _aQuery = new Array();
						_aQuery.push( sOperation );
						if( Tools.isArray( oOptions.aFields ) ){
							if( !oOptions.aFields.length ){
								_aQuery.push( '*' );
							} else {
								var _aFields = new Array();
								for( var _iIndex in oOptions.aFields ){
									_aFields.push( oOptions.aFields[ _iIndex ] );
								}
								_aQuery.push( _aFields.join(', ') );
							}

						} else {
							if( Tools.isEmptyObject( oOptions.aFields ) ){
								_aQuery.push( '*' );
							} else {
								var _aFields = new Array();
								for( var _sField in oOptions.aFields ){
									_aFields.push( _sField );
								}
								_aQuery.push( _aFields.join(', ') );
							}
						}
						_aQuery.push('FROM');
						_aQuery.push( sTable );
						_aQuery.push('WHERE (');
						if( Tools.isEmptyObject( oOptions.aWheres ) ){ //Missing where parameter
							_aQuery.push( '1' );
						} else {
							var _aWhere = new Array();
							if( !( Tools.isArray( oOptions.aWheres ) && typeof oOptions.aWheres[0] == 'object' ) ){ //If it's a simple array, converting it to a matrix with a single line; from the Matrix we get an AND on the same line and OR on different lines
								oOptions.aWheres = new Array( oOptions.aWheres );
							}
							for( var _Index in oOptions.aWheres ){
								var _aTmpWhere = new Array();
								var _aCurrentWhere = oOptions.aWheres[ _Index ];
								for( var _sField in _aCurrentWhere ){
									var _sValue = _aCurrentWhere[ _sField ];
									var _bIsString = Tools.isString( _sValue );
									_aTmpWhere.push( _sField.toUpperCase() + '=' + ( _bIsString ? '\'' : '' ) + _sValue + ( _bIsString ? '\'' : '' ) );
								}
								if( !_aCurrentWhere['OWNED_BY'] && !_aCurrentWhere['owned_by'] ){
									_aTmpWhere.push( 'OWNED_BY != \'SYSTEM\'' );
								}
								_aWhere.push( ' (' + _aTmpWhere.join(' AND ') + ') ' );
							}
							_aQuery.push( _aWhere.join(' OR ') );
						}
						_aQuery.push(');');
						var _sQuery = _aQuery.join(' ');
						this._executeQuery( _sQuery, oOptions.fCallback );
					break;
					default:
						Tools.error('[ DBiKon ] Unable to build query for table: "%s" and operation: "%s"...', sTable, sOperation );
					break;
				}
			break;
			default:
				Tools.error('[ DBiKon ] Unsupported target table: "%s"...', sTable );
			break;
		}
	},
	_executeQuery: function( sQuery, fCallback ){
		Tools.debug('[ DBiKon ] Builded Query: "%s"...', sQuery );
		var _sQueryRequest = this._convertQuery2iKonDBManager( sQuery );
		Tools.debug('[ DBiKon ] Sending Query Request: \n"%s"\n...', _sQueryRequest );
		var _oDBiKon = this;
		var _sResponse = '';
		this._oDBEndpoint.on('data', function( oData, oGWEndpoint ) {
			_sResponse += oData.toString('UTF8');
		});
		this._oDBEndpoint.on('close', function( oGWEndpoint ) {
			Tools.debug('[ DBiKon ] Data completly received:\n"%s"\n from iKon DB manager endpoint...', _sResponse );
			if( fCallback ){
				var _oResponse = _oDBiKon._parseiKonDBManagerResponse( _sResponse );
				fCallback( _oResponse.iResult, _oResponse.aRows, sQuery );
			}
		});
		this._oDBEndpoint.write( 0, _sQueryRequest, 'UTF8' );
	},
	_parseiKonDBManagerResponse: function( sReponse ){
		var _aRows = new Array();
		var _aResponse = sReponse.split( '\n' );
		var _iResult = ( _aResponse[ 1 ] ? parseInt( _aResponse[ 1 ].replace( 'Response: DBMG-', '' ) ) : 999 );
		var _iRowsSize = ( _aResponse[ 2 ] ? parseInt( _aResponse[ 2 ].replace( 'NextRows: ', '' ) )-1 : 0 );
		if( _iResult==0 && !isNaN( _iRowsSize ) ){
			var _aColumns = null;
			for( var _iIndex in _aResponse ){
				var _sRow = _aResponse[ _iIndex ];
				if( _iIndex==0 || _iIndex==1 || _iIndex==2 || !_sRow ){ //Ignoring Response Result and rows num
					continue;
				}
				_aElements = _sRow.match(/^(Row(\d+): ')(.+)'$/m)[ 3 ].split( "','" );
				if( _iIndex==3 ){ //Columns
					_aColumns = _aElements;
				} else {
					var _oElement = {};
					for( var _iIndexElement in _aElements ){
						_oElement[ _aColumns[ _iIndexElement ] ] = ( Tools.isNumeric( _aElements[ _iIndexElement ] ) ? parseFloat( _aElements[ _iIndexElement ] ) : _aElements[ _iIndexElement ] );
					}
					_aRows.push( _oElement );
				}
			}
			Tools.debug( '[ DBiKon ] Results size: %s; Results: %j', _iRowsSize, _aRows );
		} else {
			Tools.error( '[ DBiKon ] Error: %s: Unable to parse iKon DB Manager response: \n"%s"\n...', _iResult, sReponse );
		}
		return {
			iResult: _iResult,
			aRows: _aRows,
			iRowsSize: _iRowsSize
		};
	},
	_convertQuery2iKonDBManager: function( sQuery ){
		var _aQueryRequest = new Array();
		var _aQuery = sQuery.split(' ');
		var _sQueryType = _aQuery[ 0 ].toLowerCase();
		var _sQuerySubType = _aQuery[ 1 ].toLowerCase();
		//Request Type
		var _sTag = 'Request: ';
		switch( _sQueryType ){
			case 'drop':
			case 'create':
				_aQueryRequest.push( _sTag + 'DDL-SQL' );
			break;
			default:
				_aQueryRequest.push( _sTag + 'DML-SQL' );
			break;
		}
		//Query Type
		_sTag = 'Type: ';
		switch( _sQueryType ) {
			//CREATE
			case 'create':
				switch( _sQuerySubType ){
					case 'trigger':
						_aQueryRequest.push( _sTag + 'CREATE-TRIGGER' );
					break;
					default:
						_aQueryRequest.push( _sTag + 'NO-TYPE' );
					break;
				}
			break;
			case 'drop':
				switch( _sQuerySubType ){
					case 'trigger':
						_aQueryRequest.push( _sTag + 'DROP-TRIGGER' );
					break;
					default:
						_aQueryRequest.push( _sTag + 'NO-TYPE' );
					break;
				}
			break;
			//SELECT
			case 'select':
   				_aQueryRequest.push( _sTag + 'SELECT' );
   			break;
			//INSERT
			case 'insert':
   				_aQueryRequest.push( _sTag + 'INSERT' );
   			break;
			//UPDATE
			case 'update':
   				_aQueryRequest.push( _sTag + 'UPDATE' );
   			break;
			//DELETE
			case 'delete':
   				_aQueryRequest.push( _sTag + 'DELETE' );
   			break;
			//TRANSACTION
			case 'begin':
			case 'commit':
			case 'rollback':
   				_aQueryRequest.push( _sTag + 'TRANSACTION' );
   			break;
			default:
				_aQueryRequest.push( _sTag + 'NO-TYPE' );
			break;
			}
			//Request query Length
			_aQueryRequest.push( 'Statement payload length: ' + sQuery.length );
			//Query
			_aQueryRequest.push( 'Statement: ' + sQuery );
			//Ending carriage return
			_aQueryRequest.push( '' );
			//Request
			return _aQueryRequest.join( '\n' );
	}
}

module.exports = new DBiKon();